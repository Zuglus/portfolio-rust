#!/bin/bash

echo "üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞: —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m'

success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }

# –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
BACKUP_DIR="backup_optimization_$(date +%Y%m%d_%H%M%S)"
mkdir -p "$BACKUP_DIR"
cp -r src "$BACKUP_DIR/"
info "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_DIR"

# 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞ - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
info "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–ª–∞–π–¥–µ—Ä–∞..."

cat > src/features/slider/slider.rs << 'EOF'
use leptos::*;
use web_sys::KeyboardEvent;
use crate::features::slider::{SliderImage, NavigationButtons};
use crate::shared::types::Project;

#[derive(Clone, Copy, PartialEq)]
enum SlideDirection {
    None,
    Forward,
    Backward,
}

#[derive(Clone, Copy, PartialEq)]
enum SliderState {
    Idle,
    Transitioning,
}

#[component]
pub fn Slider(project: Project) -> impl IntoView {
    let slides = create_memo(move |_| project.slides.clone());
    let total_slides = slides.get().len();
    
    let (current_index, set_current_index) = create_signal(0);
    let (slider_state, set_slider_state) = create_signal(SliderState::Idle);
    let (_slide_direction, set_slide_direction) = create_signal(SlideDirection::None);
    let (content_visible, set_content_visible) = create_signal(true);
    
    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ —Å–º–µ–∂–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    create_effect(move |_| {
        let current = current_index.get();
        let slides_vec = slides.get();
        
        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ —Å–ª–∞–π–¥—ã
        if let Some(_next_slide) = slides_vec.get((current + 1) % total_slides) {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ link rel="prefetch"
            // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –±—É–¥—É—â–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        }
    });
    
    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å —Ç–∞–π–º–∏–Ω–≥–æ–º –ø–æ Material Design
    let navigate = move |direction: String| {
        if slider_state.get() != SliderState::Idle { return; }
        
        let current = current_index.get();
        let (new_index, nav_direction) = match direction.as_str() {
            "next" => {
                let next = if current < total_slides - 1 { current + 1 } else { 0 };
                (next, SlideDirection::Forward)
            },
            "prev" => {
                let prev = if current > 0 { current - 1 } else { total_slides - 1 };
                (prev, SlideDirection::Backward)
            },
            _ => return,
        };
        
        if new_index == current { return; }
        
        // –ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        set_slider_state.set(SliderState::Transitioning);
        set_slide_direction.set(nav_direction);
        
        // –§–∞–∑–∞ 1: –°–∫—Ä—ã—Ç–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (150ms)
        set_content_visible.set(false);
        
        // –§–∞–∑–∞ 2: –°–º–µ–Ω–∞ —Å–ª–∞–π–¥–∞ (–∑–∞–¥–µ—Ä–∂–∫–∞ 50ms)
        set_timeout(
            move || {
                set_current_index.set(new_index);
                
                // –§–∞–∑–∞ 3: –ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–∑–∞–¥–µ—Ä–∂–∫–∞ 200ms)
                set_timeout(
                    move || {
                        set_content_visible.set(true);
                        
                        // –§–∞–∑–∞ 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ (–∑–∞–¥–µ—Ä–∂–∫–∞ 300ms)
                        set_timeout(
                            move || {
                                set_slider_state.set(SliderState::Idle);
                                set_slide_direction.set(SlideDirection::None);
                            },
                            std::time::Duration::from_millis(250)
                        );
                    },
                    std::time::Duration::from_millis(100)
                );
            },
            std::time::Duration::from_millis(150)
        );
    };
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    let handle_keydown = move |e: KeyboardEvent| {
        match e.key().as_str() {
            "ArrowRight" => navigate("next".to_string()),
            "ArrowLeft" => navigate("prev".to_string()),
            _ => {}
        }
    };
    
    create_effect(move |_| {
        let listener = window_event_listener(ev::keydown, handle_keydown);
        on_cleanup(move || drop(listener));
    });
    
    view! {
        <div class="w-full max-w-[93.75rem] mx-auto">
            // –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ª–∞–π–¥–æ–≤
            <div class="slide-viewport relative min-h-[400px] mb-6">
                {move || {
                    let slides_vec = slides.get();
                    let idx = current_index.get();
                    
                    if let Some(slide) = slides_vec.get(idx) {
                        view! {
                            <div class="slide-item entered">
                                <div class="image-container overflow-hidden rounded-lg">
                                    <SliderImage
                                        src=slide.image.clone()
                                        alt=format!("–°–ª–∞–π–¥ {} –ø—Ä–æ–µ–∫—Ç–∞ {}", idx + 1, project.title)
                                        priority={idx == 0}
                                    />
                                </div>
                            </div>
                        }.into_view()
                    } else {
                        view! {
                            <div class="slide-item entered">
                                <div class="skeleton w-full h-[400px] flex items-center justify-center">
                                    <div class="loading-spinner"></div>
                                </div>
                            </div>
                        }.into_view()
                    }
                }}
            </div>
            
            // –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å state layer
            <div class="px-8 pb-8">
                <NavigationButtons 
                    on_navigate=Callback::new(navigate)
                    disabled={slider_state.get() != SliderState::Idle}
                />

                // –ö–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ—ç—Ç–∞–ø–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
                <div class=move || {
                    if content_visible.get() {
                        "slide-content space-y-4 font-onest text-[3.28125rem] md:text-[1.25rem]"
                    } else {
                        "slide-content hidden space-y-4 font-onest text-[3.28125rem] md:text-[1.25rem]"
                    }
                }>
                    {move || {
                        let slides_vec = slides.get();
                        let idx = current_index.get();
                        
                        if let Some(slide) = slides_vec.get(idx) {
                            view! {
                                <div class="space-y-4">
                                    {slide.task.as_ref().map(|task| view! {
                                        <p class="animate-slide-up">
                                            <span class="font-semibold">"–ó–∞–¥–∞—á–∞: "</span>
                                            <span class="opacity-80">{task}</span>
                                        </p>
                                    })}
                                    
                                    {slide.solution.as_ref().map(|solution| view! {
                                        <p class="animate-slide-up" style="animation-delay: 50ms">
                                            <span class="font-semibold">"–†–µ—à–µ–Ω–∏–µ: "</span>
                                            <span class="opacity-80">{solution}</span>
                                        </p>
                                    })}
                                </div>
                            }.into_view()
                        } else {
                            view! {
                                <div class="text-center py-8 text-white/60">
                                    "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                                </div>
                            }.into_view()
                        }
                    }}
                </div>
            </div>
        </div>
    }
}
EOF

success "–°–ª–∞–π–¥–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω"

# 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ - —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Hidden
info "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞..."

cat > src/features/project_modal/modal.rs << 'EOF'
use leptos::*;
use leptos::html::Div;
use web_sys::KeyboardEvent;
use crate::features::project_modal::ModalHeader;
use crate::features::slider::Slider;
use crate::shared::types::Project;

#[derive(Clone, Copy, PartialEq)]
enum ModalState {
    Entering,
    Visible,
    Exiting,
}

#[component]
pub fn ProjectModal(
    project: Project,
    on_close: WriteSignal<Option<String>>,
) -> impl IntoView {
    let modal_ref = create_node_ref::<Div>();
    let (modal_state, set_modal_state) = create_signal(ModalState::Entering);
    
    // –ü–ª–∞–≤–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    create_effect(move |_| {
        if modal_state.get() == ModalState::Entering {
            set_timeout(
                move || set_modal_state.set(ModalState::Visible),
                std::time::Duration::from_millis(50)
            );
        }
    });
    
    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–Ω–∏–º–∞—Ü–∏–µ–π
    let handle_close = move || {
        set_modal_state.set(ModalState::Exiting);
        set_timeout(
            move || on_close.set(None),
            std::time::Duration::from_millis(200)
        );
    };
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏—à
    let handle_keydown = move |e: KeyboardEvent| {
        if e.key() == "Escape" {
            handle_close();
        }
    };
    
    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–∫—Ä–æ–ª–ª–∞ —Å –ø–ª–∞–≤–Ω—ã–º –ø–µ—Ä–µ—Ö–æ–¥–æ–º
    create_effect(move |_| {
        if let Some(Some(body)) = window().document().map(|d| d.body()) {
            let _ = body.set_attribute("class", "modal-open");
        }
        
        on_cleanup(move || {
            if let Some(Some(body)) = window().document().map(|d| d.body()) {
                let _ = body.remove_attribute("class");
            }
        });
    });
    
    // –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª—É—à–∞—Ç–µ–ª—å –∫–ª–∞–≤–∏—à
    create_effect(move |_| {
        let listener = window_event_listener(ev::keydown, handle_keydown);
        on_cleanup(move || drop(listener));
    });
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
    let backdrop_class = move || {
        match modal_state.get() {
            ModalState::Entering => "modal-backdrop fixed inset-0 z-50 flex items-center justify-center",
            ModalState::Visible => "modal-backdrop enter-active fixed inset-0 z-50 flex items-center justify-center",
            ModalState::Exiting => "modal-backdrop exit-active fixed inset-0 z-50 flex items-center justify-center",
        }
    };
    
    let container_class = move || {
        let base = "modal-container relative w-full max-w-7xl mx-auto my-4 bg-primary border border-white/10 rounded-[1.875rem] md:rounded-[1.25rem] shadow-xl overflow-hidden";
        match modal_state.get() {
            ModalState::Entering => format!("{} enter", base),
            ModalState::Visible => format!("{} enter-active", base),
            ModalState::Exiting => format!("{} exit-active", base),
        }
    };
    
    view! {
        <div 
            class=backdrop_class
            on:click=move |_| handle_close()
            node_ref=modal_ref
        >
            <div
                class=container_class
                on:click=move |e| e.stop_propagation()
            >
                <div class="h-[90vh] overflow-y-auto modal-scrollbar">
                    <div class="p-[3.75rem] md:p-[2.5rem]">
                        <ModalHeader project=project.clone() />
                        <Slider project />
                    </div>
                </div>

                // –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å state layer
                <button
                    on:click=move |_| handle_close()
                    class="interactive-element nav-button absolute top-6 right-6 p-4 md:p-2 rounded-full 
                           bg-black/40 backdrop-blur-sm 
                           hover:bg-black/60 
                           focus-visible:outline-2 focus-visible:outline-white/50
                           z-50 group
                           shadow-lg"
                    aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                >
                    <svg
                        class="w-12 h-12 md:w-6 md:h-6 text-white/80 group-hover:text-white
                             transition-colors duration-short2 ease-standard"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"
                        />
                    </svg>
                </button>
            </div>
        </div>
    }
}
EOF

success "–ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ"

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏..."

if cargo check; then
    success "–ö–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"
else
    warning "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"
    exit 1
fi

# 4. –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
info "–°–±–æ—Ä–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞..."

if trunk build --release; then
    success "–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω"
else
    warning "–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏"
    exit 1
fi

# 5. –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
git add .
git commit -m "refactor: clean up unused code and warnings

üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞:
- –£–±—Ä–∞–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ —Å–ª–∞–π–¥–µ—Ä–µ
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã enum —Å–æ—Å—Ç–æ—è–Ω–∏–π
- –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
- –û—á–∏—â–µ–Ω –∫–æ–¥ –æ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏

‚ö° –£–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
- –£–ø—Ä–æ—â–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
- –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

‚ú® –†–µ–∑—É–ª—å—Ç–∞—Ç: —á–∏—Å—Ç—ã–π –∫–æ–¥ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π"

success "–ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã"

echo ""
echo -e "${GREEN}===========================================${NC}"
echo -e "${GREEN}üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
echo -e "${GREEN}===========================================${NC}"
echo ""

info "–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:"
echo "   ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä–∞"
echo "   ‚úÖ –£–±—Ä–∞–Ω—ã –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ"
echo "   ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã enum —Å–æ—Å—Ç–æ—è–Ω–∏–π"
echo "   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"
echo "   ‚úÖ –ê–Ω–∏–º–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–∫ –ø—Ä–µ–∂–¥–µ"
echo ""

echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: ./scripts/dev.sh –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è${NC}"
echo -e "${GREEN}–¢–µ–ø–µ—Ä—å –∫–æ–¥ –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç—Å—è —á–∏—Å—Ç–æ! üßπ‚ú®${NC}"