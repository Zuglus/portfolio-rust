#!/bin/bash

echo "üèóÔ∏è –≠–¢–ê–ü 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏"
echo "============================================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "Cargo.toml" ]; then
    echo "‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ portfolio-rust"
    exit 1
fi

echo -e "${BLUE}üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...${NC}"

# –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p src/entities
mkdir -p src/shared/data
mkdir -p src/widgets

echo -e "${YELLOW}üìù –°–æ–∑–¥–∞–Ω–∏–µ mock –¥–∞–Ω–Ω—ã—Ö...${NC}"

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å mock –¥–∞–Ω–Ω—ã–º–∏
cat > src/shared/data/mod.rs << 'EOF'
use crate::shared::types::{PortfolioItem, Experience};

pub fn get_portfolio_mock_data() -> Vec<PortfolioItem> {
    vec![
        PortfolioItem {
            id: "project1".to_string(),
            image: "/mock-project1.jpg".to_string(),
            alt: "–ù–ò–¢–ò".to_string(),
        },
        PortfolioItem {
            id: "project2".to_string(),
            image: "/mock-project2.jpg".to_string(),
            alt: "–ö–û–î–ò–ò–ú".to_string(),
        },
        PortfolioItem {
            id: "project3".to_string(),
            image: "/mock-project3.jpg".to_string(),
            alt: "–î–µ–Ω—å —Ñ–∏–∑–∏–∫–∏".to_string(),
        },
        PortfolioItem {
            id: "project4".to_string(),
            image: "/mock-project4.jpg".to_string(),
            alt: "–î–∏–∑–∞–π–Ω –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π".to_string(),
        },
    ]
}

pub fn get_experience_mock_data() -> Vec<Experience> {
    vec![
        Experience {
            year: "2023-2024".to_string(),
            company: "–¶–µ–Ω—Ç—Ä –ü–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞".to_string(),
            position: "–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä".to_string(),
            duties: vec![
                "–§–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å".to_string(),
                "SMM-–¥–∏–∑–∞–π–Ω (—Å–æ—Ü—Å–µ—Ç–∏)".to_string(),
                "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏".to_string(),
                "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è".to_string(),
            ],
            circle_image: Some("/mock-circle.png".to_string()),
        },
        Experience {
            year: "2021-2022".to_string(),
            company: "–ë–∞–Ω–∫ –£–ë–†–∏–†".to_string(),
            position: "–í–µ–¥—É—â–∏–π –¥–∏–∑–∞–π–Ω–µ—Ä –æ—Ç–¥–µ–ª–∞ –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π".to_string(),
            duties: vec![
                "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏".to_string(),
                "–ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω".to_string(),
                "–ü–æ–ª–∏–≥—Ä–∞—Ñ–∏—è".to_string(),
            ],
            circle_image: None,
        },
    ]
}

pub fn get_skills_data() -> (Vec<String>, Vec<String>) {
    let hard_skills = vec![
        "PowerPoint".to_string(),
        "Figma".to_string(),
        "Photoshop, Illustrator, InDesign".to_string(),
    ];
    
    let soft_skills = vec![
        "–°–∏—Å—Ç–µ–º–Ω–æ—Å—Ç—å".to_string(),
        "–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å".to_string(),
        "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å".to_string(),
    ];
    
    (hard_skills, soft_skills)
}
EOF

echo -e "${YELLOW}üß© –°–æ–∑–¥–∞–Ω–∏–µ entity –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${NC}"

# –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
cat > src/entities/project_card.rs << 'EOF'
use leptos::*;
use crate::shared::types::PortfolioItem;

#[component]
pub fn ProjectCard(item: PortfolioItem) -> impl IntoView {
    view! {
        <div class="bg-white/5 hover:shadow-lg rounded-[1.875rem] md:rounded-[1.25rem] transition-all hover:-translate-y-2 duration-300 cursor-pointer overflow-hidden focus:outline-none focus:ring-2 focus:ring-blue-500 group">
            <div class="w-full h-64 bg-secondary/20 flex items-center justify-center group-hover:bg-secondary/30 transition-colors">
                <div class="text-center text-white/80">
                    <div class="text-xl font-mv-skifer mb-2">{&item.alt}</div>
                    <div class="text-sm font-onest opacity-60">"–ó–∞–≥–ª—É—à–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"</div>
                </div>
            </div>
        </div>
    }
}
EOF

# –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —ç–ª–µ–º–µ–Ω—Ç–∞ –æ–ø—ã—Ç–∞
cat > src/entities/experience_item.rs << 'EOF'
use leptos::*;
use crate::shared::types::Experience;

#[component]
pub fn ExperienceItem(experience: Experience) -> impl IntoView {
    view! {
        <div class="ml-[30.1025rem] md:ml-[31.875rem] mb-[7.21875rem] md:mb-[4.8125rem]">
            <div class="relative">
                {experience.circle_image.map(|_| view! {
                    <div class="absolute -top-[1.40625rem] md:-top-[0.9375rem] -left-[12.375rem] md:-left-[8.25rem] w-[7.875rem] md:w-[5.25rem] h-[7.875rem] md:h-[5.25rem]">
                        <div class="w-full h-full bg-secondary/20 rounded-full flex items-center justify-center">
                            <span class="text-secondary text-xs">"‚óè"</span>
                        </div>
                    </div>
                })}
                
                <div>
                    <p class="mb-[0.1875rem] md:mb-[0.125rem] font-extralight font-onest text-[3.28125rem] md:text-[2.1875rem] leading-[1.33] tracking-[0.01em]">
                        {&experience.year}
                    </p>
                    <h3 class="mb-[0.65625rem] md:mb-[0.4375rem] font-medium font-onest text-[3.28125rem] md:text-[2.1875rem] leading-[1.25] tracking-[0.01em]">
                        {&experience.company}
                    </h3>
                    <h3 class="mb-[0.65625rem] md:mb-[0.4375rem] font-medium font-onest text-[3.28125rem] md:text-[2.1875rem] leading-[1.33] tracking-[0.01em]">
                        {&experience.position}
                    </h3>
                    <ul class="font-extralight text-[3.28125rem] md:text-[2.1875rem] list-none relative">
                        {experience.duties.into_iter().map(|duty| view! {
                            <li class="mb-[0.75rem] md:mb-[0.5rem]">
                                <span class="-left-[4.71rem] md:-left-[3.14rem] absolute font-onest font-thin">
                                    "‚Üí"
                                </span>
                                {duty}
                            </li>
                        }).collect_view()}
                    </ul>
                </div>
            </div>
        </div>
    }
}
EOF

# –°–æ–∑–¥–∞–µ–º mod.rs –¥–ª—è entities
cat > src/entities/mod.rs << 'EOF'
pub mod project_card;
pub mod experience_item;
EOF

echo -e "${YELLOW}üé® –°–æ–∑–¥–∞–Ω–∏–µ widget –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${NC}"

# –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
cat > src/widgets/portfolio_section.rs << 'EOF'
use leptos::*;
use crate::entities::project_card::ProjectCard;
use crate::shared::data::get_portfolio_mock_data;

#[component]
pub fn PortfolioSection() -> impl IntoView {
    let portfolio_data = get_portfolio_mock_data();
    
    view! {
        <section class="relative mx-auto px-4 py-[7.75rem] max-w-[75rem]">
            <div class="relative mb-[4.1875rem] text-center z-0">
                <div class="absolute top-[-2.875rem] md:top-[-1.875rem] left-[50%] w-[25.875rem] md:w-[17.25rem] h-[28.0125rem] md:h-[18.675rem] transform -translate-x-[20.6rem] md:-translate-x-[13.625rem] z-0">
                    <div class="w-full h-full bg-secondary/10 rounded-full opacity-20"></div>
                </div>
                <h2 class="font-mv-skifer text-[4.6875rem] md:text-[3.125rem] leading-[1.24] tracking-[0.01em] relative z-10">
                    "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
                </h2>
            </div>

            <div class="relative z-10 gap-[2.71875rem] md:gap-[1.8125rem] grid grid-cols-1 md:grid-cols-2 mx-auto max-w-[70.65625rem] md:max-w-full">
                {portfolio_data.into_iter().map(|item| view! {
                    <ProjectCard item />
                }).collect_view()}
            </div>
        </section>
    }
}
EOF

# –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é —Ä–µ–∑—é–º–µ
cat > src/widgets/resume_section.rs << 'EOF'
use leptos::*;
use crate::shared::data::get_skills_data;

#[component]
pub fn ResumeSection() -> impl IntoView {
    let (hard_skills, soft_skills) = get_skills_data();
    
    view! {
        <section class="relative mx-auto px-4 py-[3.75rem] max-w-[75rem]">
            <div class="absolute left-1/2 top-[40.5rem] md:top-[27rem] w-[48.78125rem] overflow-hidden -translate-x-[16rem] md:-translate-x-[16rem]">
                <div class="w-full h-[400px] bg-secondary/5 rounded-full opacity-30"></div>
            </div>
            
            <div class="relative mb-[1.25rem] text-center">
                <div class="absolute top-[-2.875rem] md:top-[-1.875rem] left-[50%] w-[25.875rem] md:w-[17.25rem] h-[28.0125rem] md:h-[18.675rem] transform -translate-x-[14.7rem] md:-translate-x-[9.8rem]">
                    <div class="w-full h-full bg-secondary/10 rounded-full opacity-20"></div>
                </div>
                <h2 class="font-mv-skifer text-[4.6875rem] md:text-[3.125rem] leading-[1.24] tracking-[0.01em] relative">
                    "–†–µ–∑—é–º–µ"
                </h2>
            </div>

            <div class="flex justify-center items-center gap-[1.875rem] md:gap-[1.25rem] mb-[1.25rem]">
                <div class="rounded-full w-[16.6875rem] md:w-[11.125rem] h-[17.25rem] md:h-[11.55rem] bg-secondary/20 flex items-center justify-center">
                    <span class="text-4xl text-secondary font-mv-skifer">"–ü–ú"</span>
                </div>
                <h3 class="font-mv-skifer text-[4.6875rem] md:text-[3.125rem] leading-[1.05] tracking-[0.01em]">
                    "–ü–æ–ª–∏–Ω–∞" <br/> "–ú–∏–≥—Ä–∞–Ω–æ–≤–∞"
                </h3>
            </div>

            <div class="ml-[29.8125rem] md:ml-[31.875rem]">
                <div class="mb-[5.5rem] md:mb-[3rem]">
                    <h3 class="mb-[0.84375rem] md:mb-[0.5625rem] font-medium font-onest text-[3.75rem] md:text-[2.5rem]">
                        "Hard skills"
                    </h3>
                    <ul class="font-extralight text-[3.28125rem] md:text-[2.1875rem] list-none relative">
                        {hard_skills.into_iter().map(|skill| view! {
                            <li class="mb-[0.75rem] md:mb-[0.1rem]">
                                <span class="-left-[4.71rem] md:-left-[3.14rem] absolute font-onest font-thin">"‚Üí"</span>
                                {skill}
                            </li>
                        }).collect_view()}
                    </ul>
                </div>

                <div>
                    <h3 class="mb-[0.84375rem] md:mb-[0.5625rem] font-medium font-onest text-[3.75rem] md:text-[2.5rem]">
                        "Soft skills"
                    </h3>
                    <ul class="font-extralight text-[3.28125rem] md:text-[2.1875rem] list-none relative">
                        {soft_skills.into_iter().map(|skill| view! {
                            <li class="mb-[0.75rem] md:mb-[0.1rem]">
                                <span class="-left-[4.71rem] md:-left-[3.14rem] absolute font-onest font-thin">"‚Üí"</span>
                                {skill}
                            </li>
                        }).collect_view()}
                    </ul>
                </div>
            </div>
        </section>
    }
}
EOF

# –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ü–∏—é –æ–ø—ã—Ç–∞
cat > src/widgets/experience_section.rs << 'EOF'
use leptos::*;
use crate::entities::experience_item::ExperienceItem;
use crate::shared::data::get_experience_mock_data;

#[component]
pub fn ExperienceSection() -> impl IntoView {
    let experience_data = get_experience_mock_data();
    
    view! {
        <section class="relative mx-auto px-4 py-[0.75rem] max-w-[75rem]">
            <div class="absolute top-3/4 left-1/2 w-[56rem] md:w-auto -translate-x-[35.7rem] md:-translate-x-[23rem] overflow-hidden">
                <div class="w-full h-[300px] bg-secondary/5 rounded-full opacity-20"></div>
            </div>

            {experience_data.into_iter().map(|item| view! {
                <ExperienceItem experience=item />
            }).collect_view()}
        </section>
    }
}
EOF

echo -e "${YELLOW}üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π...${NC}"

# –û–±–Ω–æ–≤–ª—è–µ–º mod.rs –¥–ª—è widgets
cat > src/widgets/mod.rs << 'EOF'
pub mod header;
pub mod footer;
pub mod portfolio_section;
pub mod resume_section;
pub mod experience_section;
EOF

# –û–±–Ω–æ–≤–ª—è–µ–º shared/mod.rs
cat > src/shared/mod.rs << 'EOF'
pub mod types;
pub mod ui;
pub mod data;
EOF

# –û–±–Ω–æ–≤–ª—è–µ–º lib.rs
cat > src/lib.rs << 'EOF'
pub mod app;
pub mod pages;
pub mod widgets;
pub mod entities;
pub mod shared;
EOF

echo -e "${YELLOW}üìÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...${NC}"

# –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
cat > src/pages/home.rs << 'EOF'
use leptos::*;
use crate::widgets::header::Header;
use crate::widgets::footer::Footer;
use crate::widgets::portfolio_section::PortfolioSection;
use crate::widgets::resume_section::ResumeSection;
use crate::widgets::experience_section::ExperienceSection;

#[component]
pub fn HomePage() -> impl IntoView {
    view! {
        <div class="bg-primary text-white min-h-screen">
            <Header />
            
            <main>
                <PortfolioSection />
                <ResumeSection />
                <ExperienceSection />
            </main>
            
            <Footer />
        </div>
    }
}
EOF

echo -e "${BLUE}üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∞–ø–∞ 3...${NC}"

# –ö–æ–º–ø–∏–ª—è—Ü–∏—è —Å—Ç–∏–ª–µ–π
echo "üé® –ö–æ–º–ø–∏–ª—è—Ü–∏—è TailwindCSS..."
npx tailwindcss -i ./style/main.scss -o ./style/output.css

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
echo "ü¶Ä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ Rust..."
if cargo check; then
    echo -e "${GREEN}‚úÖ –≠—Ç–∞–ø 3 —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!${NC}"
    echo ""
    echo "–ß—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ:"
    echo "‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ"
    echo "‚Ä¢ –í—Å–µ —Å–µ–∫—Ü–∏–∏ —Å –∑–∞–≥–ª—É—à–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö"
    echo "‚Ä¢ Entity –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (ProjectCard, ExperienceItem)"
    echo "‚Ä¢ Widget –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (Portfolio, Resume, Experience)"
    echo "‚Ä¢ Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Å–µ–∫—Ü–∏–π"
    echo ""
    echo "–ó–∞–ø—É—Å—Ç–∏—Ç–µ 'npm run dev' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥.${NC}"
    exit 1
fi

echo -e "${GREEN}üéâ –≠—Ç–∞–ø 3 –∑–∞–≤–µ—Ä—à–µ–Ω! –ì–æ—Ç–æ–≤ –∫ –∫–æ–º–º–∏—Ç—É: feat: static-layout-with-mocks${NC}"